services:
  postgresql:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"
        ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
      TZ: ${TZ}
    env_file:
      - .env
    networks:
      frontend:
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    environment:
      TZ: ${TZ}
    networks:
      frontend:
  server:
    image: ${AUTHENTIK_IMAGE}:${AUTHENTIK_TAG}
    container_name: authentik-server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      TZ: ${TZ}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      frontend:
    labels:
      - "traefik.enable=true"

      # External HTTP Router
      - "traefik.http.routers.authentik.entrypoints=http-external"
      - "traefik.http.routers.authentik.rule=Host(`authentik.${TRAEFIK_DOMAIN}`) || (HostRegexp(`{YOUR_SUBDOMAIN_HERE:[A-Za-z0-9](?:[A-Za-z0-9\-]{0,61}[A-Za-z0-9])?}.${TRAEFIK_DOMAIN}`) && PathPrefix(`/outpost.goauthentik.io/`))"
      - "traefik.http.middlewares.authentik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.authentik.middlewares=authentik-https-redirect"

      # External HTTPS Router
      - "traefik.http.routers.authentik-secure.entrypoints=https-external"
      - "traefik.http.routers.authentik-secure.rule=Host(`authentik.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.authentik-secure.tls=true"
      - "traefik.http.routers.authentik-secure.service=authentik"

      # Internal HTTP Router
      - "traefik.http.routers.authentik-local.entrypoints=http"
      - "traefik.http.routers.authentik-local.rule=Host(`authentik.${TRAEFIK_LOCAL_DOMAIN}`) || (HostRegexp(`{YOUR_SUBDOMAIN_HERE:[A-Za-z0-9](?:[A-Za-z0-9\-]{0,61}[A-Za-z0-9])?}.${TRAEFIK_LOCAL_DOMAIN}`) && PathPrefix(`/outpost.goauthentik.io/`))"
      - "traefik.http.middlewares.authentik-https-redirect-local.redirectscheme.scheme=https"
      - "traefik.http.routers.authentik-local.middlewares=authentik-https-redirect-local"

      # Internal HTTPS Router
      - "traefik.http.routers.authentik-secure-local.entrypoints=https"
      - "traefik.http.routers.authentik-secure-local.rule=Host(`authentik.${TRAEFIK_LOCAL_DOMAIN}`)"
      - "traefik.http.routers.authentik-secure-local.tls=true"
      - "traefik.http.routers.authentik-secure-local.service=authentik"

      # Service Configuration
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"

      # Docker Network
      - "traefik.docker.network=frontend"

  worker:
    image: ${AUTHENTIK_IMAGE}:${AUTHENTIK_TAG}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      TZ: ${TZ}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      frontend:

volumes:
  database:
    driver: local
  redis:
    driver: local

networks:
  frontend:
    external: true